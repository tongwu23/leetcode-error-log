public class Solution {
    public boolean hasCycle(ListNode head) {
    if(head == null || head.next == null) return false; 
    ListNode fast = head; 
    ListNode slow = head; 
    if (fast.next != null || fast.next.next != null){ //不能用if因为那样的话检查一次就没有了
        fast = fast.next.next; 
        slow = slow.next; 
        if(fast == slow){
            return true; 
        }
    }
    return false; 
}

public class Solution {
    public boolean hasCycle(ListNode head) {
        ListNode fast = head;
        ListNode slow = head;

        while (fast != null && fast.next != null) {
            fast = fast.next.next;
            slow = slow.next;

            if (fast == slow) {
                return true;
            }
        }

        return false;        
    }
}
