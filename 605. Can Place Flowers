class Solution {
    public boolean canPlaceFlowers(int[] flowerbed, int n) {
        int count = 0; 
        for (int i = 0; i < flowerbed.length; i++){
            boolean emptyLeft = flowerbed[i-1].equals(0); // 不能拿0作为比较
            boolean emptyRight = flowerbed[i+1].equals(0);
            if (emptyLeft && emptyRight){
                flowerbed[i] = 1;
                count ++; 
            }
        }
    return count > n; 
    }
}

corrected version: 
class Solution {
    public boolean canPlaceFlowers(int[] flowerbed, int n) {
        int count = 0;
        for (int i = 0; i < flowerbed.length; i++) {
            if (flowerbed[i] == 0) { // 之前没有写这个导致的错误，需要他自己本身是0 
                boolean emptyLeft = (i == 0) || (flowerbed[i - 1] == 0);
                boolean emptyRight = 
                (i == flowerbed.length - 1) || (flowerbed[i + 1] == 0);

                if (emptyLeft && emptyRight) {
                    flowerbed[i] = 1;
                    count++;    
                }
            }
        }
        return count >= n;
    }
}
