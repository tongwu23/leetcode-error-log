class Solution {
    private Integer prev = null; 

    private int minDifference = Integer.MAX_VALUE;

    public int getMinimumDifference(TreeNode node) {
        if node == null; return; 
        inorder(node.left);
        public void inorder(node){
            if (prev != null){
                minDifference = Math.min(minDifference, node.value - prev)
            }
            prev = node.value; 
        }
        inorder(node.right); 
    }
}
class Solution {
    private Integer prev = null;
    private int minDifference = Integer.MAX_VALUE;

    public int getMinimumDifference(TreeNode root) {
        inorder(root);
        return minDifference;
    }

    private void inorder(TreeNode node) {
        if (node == null) return;

        inorder(node.left);  // Step 1: left

        // Step 2: process current node
        if (prev != null) {
            minDifference = Math.min(minDifference, node.val - prev);
        }
        prev = node.val;

        inorder(node.right); // Step 3: right
    }
}
